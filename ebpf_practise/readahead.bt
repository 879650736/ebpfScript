#!/usr/bin/bpftrace

tracepoint:syscalls:sys_enter_readahead
{
    @in_readahead[tid] = 1;
}

tracepoint:syscalls:sys_exit_readahead
{
    @in_readahead[tid] = 0;
}

// 2. 使用 PFN 记录页缓存添加事件
tracepoint:filemap:mm_filemap_add_to_page_cache
/@in_readahead[tid] == 1/
{
    // 参数包含 pfn（物理页帧号），直接作为唯一标识
    @birth[args->pfn] = nsecs;  // 记录 PFN 和添加时间
    @rapages++;                 // 预读页面计数+1
}


// 3. 使用 kprobe 追踪页面访问事件
kprobe:mark_page_accessed
{
    // 通过内核函数 page_to_pfn 将 struct page* 转换为 PFN
    $page = (struct page *)arg0;
    $pfn = ((struct page *)arg0)->flags >> 20;  // 假设 flags 高位存储 PFN（需验证）
    if (@birth[$pfn]) {
        @age_ms = hist((nsecs - @birth[$pfn]) / 1000000);  // 计算存活时间（ms）
        delete(@birth[$pfn]);
        @rapages--;  // 减少未使用计数
    }
}

// 4. 追踪页面从缓存移除事件（处理未访问即释放的情况）
tracepoint:filemap:mm_filemap_delete_from_page_cache
/@birth[args->pfn]/
{
    delete(@birth[args->pfn]);
    @rapages--;
    @unused_pages++;  // 统计未访问的页面
}

END {
    printf("\nReadahead unused pages: %d (unaccessed freed: %d)\n", @rapages, @unused_pages);
    printf("Readahead page age (ms):\n");
    print(@age_ms);
    clear(@age_ms);
    clear(@birth);
    clear(@rapages);
    clear(@in_readahead);
    clear(@unused_pages);
}